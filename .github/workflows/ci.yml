name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cat <<EOF > .env
            MYSQL_ROOT_PASSWORD=rootpassword
            MYSQL_DATABASE=todo_app
            MYSQL_USER=mysqluser
            MYSQL_PASSWORD=password
            DOCKER_COMPOSE_FILE=compose.ci.yaml
          EOF

      - name: Create Go .env file
        run: |
          cat <<EOF > go/.env
            DATABASE_PORT=3306
            DATABASE_HOST=db
            DATABASE_DBNAME=todo_app
            DATABASE_USER=mysqluser
            DATABASE_PASSWORD=password
            SERVER_PORT=8080
            AUTH_JWTSECRET=sample
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: front/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('front/package-lock.json') }}

      - name: Cache Go go_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-todo
          key: ${{ runner.os }}-buildx-todo-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-todo-

      - name: build front image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/front/Dockerfile
          push: false
          cache-from: type=gha,src=/tmp/.buildx-cache-todo
          cache-to: type=gha,dest=/tmp/.buildx-cache-todo,mode=max

      - name: build go image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/go_ci/Dockerfile
          target: build
          push: false
          cache-from: type=gha,src=/tmp/.buildx-cache-todo
          cache-to: type=gha,dest=/tmp/.buildx-cache-todo,mode=max

      - name: build e2e image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/e2e/Dockerfile
          push: false
          cache-from: type=gha,src=/tmp/.buildx-cache-todo
          cache-to: type=gha,dest=/tmp/.buildx-cache-todo,mode=max     
    
      - name: Wait for starting
        run: make up-wait

      - name: Frontend Container Debug Log
        run: docker compose -f compose.ci.yaml logs front

      - name: Go Container Debug Log
        run: docker compose -f compose.ci.yaml logs go

      - name: E2E Container Debug Log
        run: docker compose -f compose.ci.yaml logs e2e

      - name: DB Container Debug Log
        run: docker compose -f compose.ci.yaml logs db

      - name: Docker Container List
        run: make ps

      - name: Frontend Lint
        run: make lint

      - name: Frontend TypeScript Check
        run: make tsc-check

      - name: Frontend Format
        run: make format

      - name: Frontend Test
        run: make test

      # - name: Go Lint
      #   run: make go-lint

      # - name: Go Format
      #   run: make go-fmt

      - name: Go Test
        run: make go-test

      - name: Wait for Go API server
        run: |
          timeout 60s bash -c '
            until curl -s http://localhost:8080/api/v1/test > /dev/null; do
              echo "Waiting for Go server..."
              sleep 2
            done
          '

      - name: Check API Server Is Running
        run: curl http://localhost:8080/api/v1/test

      # - name: E2E Test (Playwright)
      #   run: make e2e-test

      - name: Docker Compose Down
        if: always()
        run: make down